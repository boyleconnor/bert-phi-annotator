# coding: utf-8

from __future__ import absolute_import
from typing import List
from openapi_server.models.base_model_ import Model
from openapi_server.models.text_id_annotation import TextIdAnnotation
from openapi_server import util


class TextIdAnnotationResponse(Model):
    """NOTE: This class is auto generated by
    OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, text_id_annotations=None):  # noqa: E501
        """TextIdAnnotationResponse - a model defined in OpenAPI

        :param text_id_annotations: The text_id_annotations of this TextIdAnnotationResponse.  # noqa: E501
        :type text_id_annotations: List[TextIdAnnotation]
        """
        self.openapi_types = {
            'text_id_annotations': List[TextIdAnnotation]
        }

        self.attribute_map = {
            'text_id_annotations': 'textIdAnnotations'
        }

        self._text_id_annotations = text_id_annotations

    @classmethod
    def from_dict(cls, dikt) -> 'TextIdAnnotationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TextIdAnnotationResponse of this TextIdAnnotationResponse.  # noqa: E501
        :rtype: TextIdAnnotationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text_id_annotations(self):
        """Gets the text_id_annotations of this TextIdAnnotationResponse.

        A list of ID annotations  # noqa: E501

        :return: The text_id_annotations of this TextIdAnnotationResponse.
        :rtype: List[TextIdAnnotation]
        """
        return self._text_id_annotations

    @text_id_annotations.setter
    def text_id_annotations(self, text_id_annotations):
        """Sets the text_id_annotations of this TextIdAnnotationResponse.

        A list of ID annotations  # noqa: E501

        :param text_id_annotations: The text_id_annotations of this TextIdAnnotationResponse.
        :type text_id_annotations: List[TextIdAnnotation]
        """
        if text_id_annotations is None:
            raise ValueError("Invalid value for `text_id_annotations`, must not be `None`")  # noqa: E501

        self._text_id_annotations = text_id_annotations
